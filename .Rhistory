tee <- 0.001
alpha
  v <- list(b, -1)
v
v[[2]]
dotl(tee, v)
source("solvede.R")
dotl(tee, v)
z
  z <- c(alpha, tee)
z
dotl(tee, v)
source("solvede.R")
dotl(tee, v)
z[1] * v[[1]]
z[2]*v[[2]]
z[2]*v[[2]] + z[1]*v[[1]]
source("solvede.R")
dotl(tee, v)
dotl(z, v)
a
s
a+s
a+s + dotl(z,v)
sum(a+s + dotl(z,v))
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
l
v
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
q()
ls()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
q()
sys.info()
Sys.info()
interactive()
package.skeleton(name="brownboost", list="binarybrownboost"
)
package.skeleton(name="brownboost", list="deSolver")
package.skeleton(name="brownboost", list="solvede")
q()
source("brownboost/R/deSolver.R")
ls()
runSolver
0.01 * 500
ls()
x
y
x <- c(2, 3)
y <- c(0,0)
x-y
sum(x-y)
source("brownboost/R/deSolver.R")
ls()
runSolverTest2()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
0.3089083 == 0.3089083
source("brownboost/R/deSolver.R")
runSolverTest1()
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
options()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest2()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest1()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
exp(-(24.24461/24.24461))
exp(-(1/24.24461) * 24.24461^2)
a
ls()
rm(list=ls())
source("brownboost/R/deSolver.R")
runSolverTest2()
a <- 24.24461
a
c <- 24.24461
erfd(a/sqrt(c))
  alpha <- 0.0
  tee <- 0.0
  epsilon <- 0.10                               # Estimated error of data set
  c <- (1/as.double(erfc(1-epsilon)))^2         # c defined from epsilon
  #c <- 32
  s <- c                               # s == c at t == 0
  a <-rep(0, times=500) + s                     # This is the margin r(x) + step
  h <- sample(x=c(-1,1), replace=T, size=500)   # This is the hypothesis
  y <- h                                        # This is the true class
  b <- h * y   
ls()
a
c
alpha
ls()
h
y
y*h
sum( exp( (-1/c) * (a + alpha*y*h + - tee)^2 ) *h*y
)
sum( exp( (-1/c) * (a + alpha*y*h + - tee)^2 )) *h*y
sum( exp( (-1/c) * (a + alpha*y*h + - tee)^2 ) *h*y)
sum( exp( (-1/c) * (a + alpha*y*h - tee)^2)
)
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
runSolverTest2()
runSolverTest1()
runSolverTest2()
runSolverTest1()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
library(RWeka)
wine <- read.table("brownboost/data/wine.data", sep=",")
wine
y <- wine[,1]
y
wine <- wine[,2:]
length(names(wine))
wine <- wine[,2:14]
wine
y
ds <- DecisionStump(formula= y ~ wine)
wine <- read.table("brownboost/data/wine.data", sep=",")
ds <- DecisionStump(formula= wine$V1 ~ ., data=wine)
summary(ds)
ds <- DecisionStump(formula= wine$V1 ~ wine$V2 + wine$V3 + wine$V4, data=wine)
summary(ds)
ds
ds <- DecisionStump(formula= wine$V1 ~ ., data=wine)
ds
ds <- DecisionStump(formula=V1 ~ ., data=wine)
predict(ds)
train <- sample(seq(1, 178), 100)
train
test <- !(train %in% seq(1, 178))
test
(train %in% seq(1, 178))
(seq(1, 178) %in% train)
which(!(seq(1, 178) %in% train))
test <- which(!(seq(1, 178) %in% train))
test
train
trainData <- wine[train,]
testData <- wine[test,]
testData
ds <- DecisionStump(formula=V1 ~ ., data=trainData)
ds
table(testData, predict(ds))
ds
predict(ds, newdata=testData)
testData
jtree <- J48(formula=V1 ~ ., data=trainData)
attach(iris)
iris
trainData
trainData[,1]
as.factor(trainData[,1])
trainData <- as.factor(trainData[,1])
trainData
trainData <- wine[train,]
trainData[,1] <- as.factor(trainData[,1])
jtree <- J48(formula=V1 ~ ., data=trainData)
jtree
predict(jtree, newdata=testData)
r
ls()
a
r <- a - 24.24461
r
r <- rep(0, length(r))
r
s
c
exp(-s^2/c)
trainData
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(q())
library(Rcmdr)
ls()
source("brownboost/R/brownboost.R")
q()
ls()
source("brownboost/R/brownboost.R")
brownboost(wdbc, 10, 5)
b <- brownboost(wdbc, 5, 1)
b
plot(b$alphas)
b$ensemble[1]
predict(b$ensemble[1], newdata=wdbc)
be1 <- b$ensemble[1]
predict(be1, newdata=wdbc)
wdbc
names(wdbc)
ls
be1
be1$classifier
predict(be1$classifier, newdata=wdbc)
be <- unlist(b$ensemble)
be
predict(be[1], newdata=wdbc)
predict(be, newdata=wdbc)
be[1]
be[1]$classifier
be
be[1]
predict.Weka_classifier(be[1], newdata=wdbc)
library(RWeka)
predict.Weka_classifier(be[1], newdata=wdbc)
predict(be[1], newdata=wdbc)
be[1]
be[1]$classifier
RWeka::DecisionStump(be[1])
classifier <- DecisionStump(Class ~ ., data=wdbc)
classifier
wdbc["Class"]
source("brownboost/R/brownboost.R")
source("brownboost/R/brownboost.R")
b <- brownboost(wdbc, 3, 1)
b
plot(b$alphas)
b$ensemble[1]
sampledData <- sample(seq(1, rows), replace=T, prob=sampProb, size=0.25*rows)
rows <- length(wdbc[,1])
sampledData <- sample(seq(1, rows), replace=T, prob=sampProb, size=0.25*rows)
sampProb <- rep(1/rows, rows)
sampProb
sampledData <- sample(seq(1, rows), replace=T, prob=sampProb, size=0.25*rows)
classifier <- DecisionStump(Class ~ ., data=wdbc, subset=sampledData)
classifer
classifier
ccc <- c(classifier)
ccc
ccc[1]
c
ccc
ls()
ccc[1]$classifier$
classifier$call
classifier$predictions
ccc
ccc[1]
RWeka::make_Weka_classifier(ccc[1])
RWeka::Weka_control(ccc[1])
RWeka::Weka_control(...= ccc[1])
RWeka::make_Weka_classifier(ccc[1])
RWeka::make_Weka_classifier(ccc[1]$classifier)
WOW(ccc[1])
ls()
rm(list=ls())
source("brownboost/R/brownboost.R")
wdbc <- read.table("wdbc_with_class_label.data", header=T)
ls()
rows <- length(wdbc[,1])
sampProb <- rep(1/rows, rows)
sampledData <- sample(seq(1, rows), replace=T, prob=sampProb, size=0.25*rows)
ds <- DecisionStump(Class ~ ., data=wdbc, subset=sampledData)
ds
predict(ds)
sign(predict(ds))
source("brownboost/R/brownboost.R")
results <- brownboost(wdbc, 5, 1, wdbc)
?data.table
source("brownboost/R/brownboost.R")
results <- brownboost(wdbc, 5, 1, wdbc)
source("brownboost/R/brownboost.R")
results <- brownboost(wdbc, 5, 1, wdbc)
source("brownboost/R/brownboost.R")
source("brownboost/R/brownboost.R")
results <- brownboost(wdbc, 5, 1, wdbc)
ls()
results
sum(results[1,])
sum(results[2,])
sum(results[seq(1,length(results[,1]),])
sum(results[seq(1,length(results[,1])),])
apply(FUN=sum, X=results, MARGIN=T)
?apply
apply(FUN=sum, X=results, MARGIN=c(1))
?apply
lapply(FUN=sum, X=results, MARGIN=c(1))
tapply(FUN=sum, X=results, MARGIN=c(1))
apply(FUN=sum, X=results, MARGIN=c(1))
unlist(apply(FUN=sum, X=results, MARGIN=c(1)))
r <- unlist(apply(FUN=sum, X=results, MARGIN=c(1)))
r
as.vector(r)
rsign <- sign(as.vector(r))
rsign
ls()
wdbc$Class
wdbc$Class * rsign
ls()
sampledData
testData <- wdbc[sampledData, ]
rows
seq(1, rows) %in% sampledData
which(seq(1, rows) %in% sampledData == FALSE)
trainingData <- wdbc[which(seq(1, rows) %in% sampledData == FALSE)
,]
sampledData
t1 <- brownboost(trainingData, 3, 1, testData)
source("brownboost/R/brownboost.R")
t1 <- brownboost(trainingData, 3, 1, testData)
t1
t1sign <- sign(apply(sum, t1, c(1)))
t1sign <- sign(apply(FUN=sum, X=t1, MARGIN=c(1)))
t1sign
t1sign <- as.vector(t1sign)
t1sign
t1sign * testData$Class
length(t1sign)
5/142
length(trainingData)
length(trainingData[,1])
ls()
length(results[1,])
which(t1sign*testData$Class == -1)
testData$Class[which(t1sign*testData$Class == -1)]
source("brownboost/R/brownboost.R")
brownAccuracy(results, testData$Class)
> t1 <- brownboost(trainingData, 3, 1, testData)
> t1sign <- sign(apply(FUN=sum, X=t1, MARGIN=c(1)))
> t1sign <- as.vector(t1sign)
matrix(data=c(0,0,0,0), nrow=2)
m <- matrix(data=c(0,0,0,0), nrow=2)
m
m[1][1] <- 2
m
source("brownboost/R/brownboost.R")
brownAccuracy(results, testData$Class)
source("brownboost/R/brownboost.R")
brownAccuracy(results, testData$Class)
source("brownboost/R/brownboost.R")
brownAccuracy(results, testData$Class)
source("brownboost/R/brownboost.R")
results <- brownboost(trainingData, 7, 1, testData)
brownAccuracy(results, testData$Class)
results <- brownboost(trainingData, 15, 1, testData)
length(results[1,])
length(results[,1])
brownAccuracy(results, testData$Class)
?lines
source("brownboost/R/brownboost.R")
results <- brownboost(trainingData, 3, 1, testData)
source("brownboost/R/brownboost.R")
results <- brownboost(trainingData, 3, 1, testData)
brownAccuracy(results, testData$Class)
source("brownboost/R/brownboost.R")
source("brownboost/R/brownboost.R")
results <- brownboost(trainingData, 3, 1, testData)
source("brownboost/R/brownboost.R")
source("brownboost/R/brownboost.R")
results <- brownboost(trainingData, 3, 1, testData)
brownAccuracy(results, testData$Class)
testData$Class
q()

runSolverTest1()
runSolverTest1()
runSolverTest1()
runSolverTest1()
r
runSolverTest2()
runSolverTest2()
source("brownboost/R/BisectionDESolver.R")
runSolverTest2()
source("brownboost/R/BisectionDESolver.R")
runSolverTest2()
source("brownboost/R/BisectionDESolver.R")
runSolverTest2()
source("brownboost/R/BisectionDESolver.R")
source("brownboost/R/BisectionDESolver.R")
runSolverTest2()
source("brownboost/R/BisectionDESolver.R")
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest1()
runSolverTest1()
runSolverTest1()
runSolverTest1()
runSolverTest1()
runSolverTest1()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
runSolverTest2()
source("brownboost/R/BisectionDESolver.R")
runSolverTestN(5)
runSolverTestN(100)
runSolverTestN(100)
list(numeric(50))
list(numeric(50))
list(vector(numeric(50)))
list(50)
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(100, 300)
ls()
r
r[[1]]
r
append(r, 1)
source("brownboost/R/BisectionDESolver.R")
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(100, 300)
r
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(100, 300)
r
r <- as.vector(r)
r
r <- unlist(r)
r
plot(r)
tries <- read.table("brownboost/data/tries.txt")
tries
tries <- tries[,1]
tries
plot(r, tries)
length(r)
length(tries)
ls()
t2 <- c()
tries2 <- for(t in tries) {t2 <- c(t2, t, t)}
t2
tries2
rm(tries2)
plot(r, t2)
r <- runSolverTestN(50, 400)
tries <- read.table("brownboost/data/tries.txt")
for(t in tries) {t2 <- c(t2, t, t)}
t2 <- c()
for(t in tries) {t2 <- c(t2, t, t)}
t2
plot(t2)
plot(r)
r
r <- unlist(r)
plot(r)
plot(r)
ralpha <- c()
for(i in seq(1, length(r), by=2)) {ralpha <- c(ralpha,r[i])}
plot(ralpha)
plot(r)
lm(ralpha ~ 1:length(ralpha))
lm(ralpha ~ 1:length(ralpha)-1)
length(ralpha)
length(1:ralpha)
length(1:length(ralpha))
lm(ralpha ~ (1:length(ralpha)))
lm(ralpha)
lm(ralpha~)
lm(ralpha~.)
plot(ralpha)
?abline
abline(0.55/42, 0.55)
abline(b=0.55/42, a=0.55)
abline(b=-0.55/42, a=0.55)
plot(ralpha, main="alpha values for error rates of 10% to 80% as h(x) * y", xlab="ticks are in 5% error increasing", ylab="alpha as a solution to the diff. eqn.")
abline(b=-0.55/42, a=0.55)
dev.copy2pdf()
r <- runSolverTestN(50, 400)
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(50, 400)
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(50, 400)
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(50, 400)
r <- runSolverTestN(50, 400)
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(50, 400)
source("brownboost/R/BisectionDESolver.R")
source("brownboost/R/BisectionDESolver.R")
r <- runSolverTestN(50, 400)
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest1()
r <- runSolverTest2()
r <- runSolverTest2()
r <- runSolverTest2()
r <- runSolverTest2()
r <- runSolverTest2()
r <- runSolverTest2()
r <- runSolverTest2()
ls()
a
b
ls(
)
c
c2
h
hi
lo
s
t
ls()
x1
x2
y
ls()
q()
ls()
source("brownboost/R/bisectionTest.R")
source("brownboost/R/besectionTest.R"))
source("brownboost/R/besectionTest.R")
dyn.load("brownboost/src/bisection.so")
source("brownboost/R/besectionTest.R")
ls
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
q()
source("brownboost/R/besectionTest.R")
?.C
numeric(2)
source("brownboost/R/besectionTest.R")
q()
ls()
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
source("brownboost/R/besectionTest.R")
ls()
q()
source("brownboost/R/CTest.R")
source("brownboost/R/CTest.R")
source("brownboost/R/CTest.R")
source("brownboost/R/CTest.R")
source("brownboost/R/CTest.R")
test2()
ls()
source("brownboost/R/RunBinaryBrownBoost.R")
randomBinaryBrownBoost(wdbc, 2)
randomBinaryBrownBoost(wdbc, 2)
randomBinaryBrownBoost(wdbc, 2)
q()
ls()
source("brownboost/R/MultiBrownBoost.R")
source("brownboost/R/BinaryBrownBoost.R")
source("brownboost/R/RunBinaryBrownBoost.R")
randomBinaryBrownBoost(wdbc, 2)
redwine$Class
class(redwine$Class)
source("brownboost/R/RunBinaryBrownBoost.R")
source("brownboost/R/MultiBrownBoost.R")
names(redwine)
wineme <- bbBuildMultiEnsemble(redwine[wineDex,], 1)
bbRunMultiEnsemble(redwine[wineDex,], wineme)
source("brownboost/R/MultiBrownBoost.R")
bbRunMultiEnsemble(redwine[wineDex,], wineme)
source("brownboost/R/MultiBrownBoost.R")
bbRunMultiEnsemble(redwine[wineDex,], wineme)
source("brownboost/R/MultiBrownBoost.R")
bbRunMultiEnsemble(redwine[wineDex,], wineme)
source("brownboost/R/MultiBrownBoost.R")
bbRunMultiEnsemble(redwine[wineDex,], wineme)
wineme[[1]]
wineme[[2]]
wineme[["5"]]
source("brownboost/R/MultiBrownBoost.R")
bbRunMultiEnsemble(redwine[wineDex,], wineme)
warnings()
source("brownboost/R/MultiBrownBoost.R")
bbRunMultiEnsemble(redwine[wineDex,], wineme)
wineme <- bbBuildMultiEnsemble(redwine[wineDex,], 2)
ls()
bbRunMultiEnsemble(wineme, redwine[wineDex,])
bbRunMultiEnsemble(wineme, redwine[wineDex,])
redwine
redwine[wineDex,]
bbRunMultiEnsemble(wineme, redwine[wineDex,]))
bbRunMultiEnsemble(wineme, redwine[wineDex,])
redwine$Class
redwine[wineDex,]$Class
bbRunMultiEnsemble(redwine[wineDex,], wineme)
redwineDex <- sample(wineDex, size=200, replace=F)
ls()
q()
ls()
source("brownboost/R/RunBinaryBrownBoost.R")
runBinaryBrownBoost(wdbc[train,], wdbc[test,], 2)
ls()
runBinaryBrownBoost(wdbc5[train,], wdbc5[test,], 2)
runBinaryBrownBoost(wdbc10[train,], wdbc10[test,], 2)
runBinaryBrownBoost(wdbc5[train,], wdbc[test,], 2)
runBinaryBrownBoost(wdbc10[train,], wdbc[test,], 2)
runBinaryBrownBoost(wdbc20[train,], wdbc[test,], 2)
runBinaryBrownBoost(wdbc30[train,], wdbc[test,], 2)
runBinaryBrownBoost(wdbc40[train,], wdbc[test,], 2)
save.image()
source("RunAdaBoost.R")
source("RunAdaBoost.R")
ls()
runGentleBoost(wdbc[train,], wdbc[test,], 100)
library(caTools)
?logitboost
?logit
?sample.split
source("RunAdaBoost.R")
source("RunAdaBoost.R")
runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
source("RunAdaBoost.R")
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 10)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 5)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 1)
logitmodel
source("RunAdaBoost.R")
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 1)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 1)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 1)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 2)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 3)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 3)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 3)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 4)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 5)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 6)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 6)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 6)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 6)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 7)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 8)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 9)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 20)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 40)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 60)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 80)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 20)
runAdaBoost(wdbc[train,], wdbc[test,], 50)
runAdaBoost(wdbc40[train,], wdbc[test,], 50)
runAdaBoost(wdbc40[train,], wdbc[test,], 20)
runAdaBoost(wdbc40[train,], wdbc[test,], 50)
runAdaBoost(wdbc40[train,], wdbc[test,], 50)
runAdaBoost(wdbc5[train,], wdbc[test,], 50)
runAdaBoost(wdbc10[train,], wdbc[test,], 50)
runAdaBoost(wdbc20[train,], wdbc[test,], 50)
runAdaBoost(wdbc30[train,], wdbc[test,], 50)
runAdaBoost(wdbc40[train,], wdbc[test,], 50)
length(wdbc$Class)
e <- sample(1:569, replace=F, size = 228)
e
wdbc40 <- wdbc
wdbc40[e,]$Class <- wdbc40[e,]$Class * -1
runAdaBoost(wdbc40[train,], wdbc[test,], 50)
e <- sample(1:569, replace=F, size = 171)
wdbc30 <- wdbc
wdbc30[e,]$Class <- wdbc30[e,]$Class * -1
runAdaBoost(wdbc30[train,], wdbc[test,], 50)
e <- sample(1:569, replace=F, size = 114)
wdbc20 <- wdbc
wdbc20[e,]$Class <- wdbc20[e,]$Class * -1
e <- sample(1:569, replace=F, size = 57)
wdbc10 <- wdbc
wdbc10[e,]$Class <- wdbc10[e,]$Class * -1
e <- sample(1:569, replace=F, size = 29)
wdbc5 <- wdbc
wdbc5[e,]$Class <- wdbc5[e,]$Class * -1
runAdaBoost(wdbc20[train,], wdbc[test,], 50)
runAdaBoost(wdbc10[train,], wdbc[test,], 50)
runAdaBoost(wdbc5[train,], wdbc[test,], 50)
source("RunAdaBoost.R")
runGentleBoost(wdbc[train,], wdbc[test,], 100)
runGentleBoost(wdbc5[train,], wdbc[test,], 100)
runGentleBoost(wdbc10[train,], wdbc[test,], 100)
runGentleBoost(wdbc20[train,], wdbc[test,], 100)
runGentleBoost(wdbc30[train,], wdbc[test,], 100)
runGentleBoost(wdbc40[train,], wdbc[test,], 100)
logitmodel <- runLogitBoost(wdbc[train,], wdbc[test,], 80)
logitmodel <- runLogitBoost(wdbc5[train,], wdbc[test,], 80)
logitmodel <- runLogitBoost(wdbc10[train,], wdbc[test,], 80)
logitmodel <- runLogitBoost(wdbc20[train,], wdbc[test,], 80)
logitmodel <- runLogitBoost(wdbc30[train,], wdbc[test,], 80)
logitmodel <- runLogitBoost(wdbc40[train,], wdbc[test,], 80)
runBinaryBrownBoost(wdbc5[train,], wdbc[test,], 2)
runBinaryBrownBoost(wdbc10[train,], wdbc[test,], 2)
runBinaryBrownBoost(wdbc20[train,], wdbc[test,], 1)
runBinaryBrownBoost(wdbc20[train,], wdbc[test,], 0.25)
save.image()
?history
savehistory()
ls()
candat <- read.table("brownboost/data/CanDat.txt", header=T, sep="\t")
names(candat)
row.names(candat)
candatnames <- row.names(candat)
candatnames
regexpr(text=candatnames, pattern="_%d")
regexpr(text=candatnames, pattern="%d")
regexpr(text=candatnames, pattern="_\d")
regexpr(text=candatnames, pattern="_\d{1}")
regexpr(text=candatnames, pattern="_\d{1}", perl=T)
?regexpr
?regexpr
?regexpr
regexpr(text=candatnames, pattern="_[0-9]", perl=T)
?regexpr
?gsub
sub(text=candatnames, pattern="_[0-9]", perl=T, replacement="")
sub(x=candatnames, pattern="_[0-9]", perl=T, replacement="")
name1 <- sub(x=candatnames, pattern="_[0-9]", perl=T, replacement="")
name1
name2 <- sub(x=name1, pattern="[A-Z]_", perl=T, replacement="")
name2
name3 <- sub(x=name2, pattern="$[A-Z][0-9]", perl=T, replacement="$1")
name3
name3 <- name2[193-201] <- TALL
name3 <- name2
name3[193:201] <- "TALL"
name3
name3[151:155] <- "TCMCF"
name3
name3 <- sub(x=name3, pattern="._*", perl=T, replacement="")
name3
name3 <- sub(x=name3, pattern="._*", replacement="")
name3
name3 <- name2
name3
name3 <- sub(x=name3, pattern="$[0-9]", replacement="")
name3
name3 <- sub(x=name3, pattern="$[0-9]", replacement="")
name3
name3 <- sub(x=name3, pattern="\z[0-9]", replacement="")
name3 <- sub(x=name3, pattern="\z[0-9]", perl=T, replacement="")
name3 <- sub(x=name3, pattern="TALL[0-9]", perl=T, replacement="TALL")
name3
name3 <- sub(x=name3, pattern="BALL[0-9]", perl=T, replacement="BALL")
name3
name3[211] <- TCALLCL
name3[211] <- "TCALLCL"
name3
name3 <- sub(x=name3, pattern="._[A-B].[0-9]", perl=T, replacement="")
name3
name3 <- sub(x=name3, pattern="._[A-B]", perl=T, replacement="")
name3
name3 <- sub(x=name3, pattern="._A", perl=T, replacement="")
name3
name3 <- sub(x=name3, pattern="._B", perl=T, replacement="")
name3
name3[105] <- "UT"
name3 <- sub(x=name3, pattern="93_[0-9]", perl=T, replacement="")
name3
grep("PD", name3)
ls()
name1
grep("T_", name1)
grep("N_", name1)
grep("PDT_", name1)
label <- rep("", size=length(name1))
label[grep("T_", name1)] <- "T"
label[grep("N_", name1)] <- "N"
label[grep("PDT_", name1)] <- "P"
label
label <- rep(NA, size=length(name1))
label
label[grep("T_", name1)] <- "T"
label[grep("N_", name1)] <- "N"
label[grep("PDT_", name1)] <- "P"
label
name3
label
name1
class <- NA
cindex <- which(label != NA)
cindex
cindex <- which(!is.na(label))
cindex
class <- name3
class[which(is.na(label))] <- NA
class
label
class[232:251] <- NA
label[232:251] <- NA
class
label
datamap <- data.frame(Class=class, Label=label)
datamap
datamap$Class[24]
datamap$Class[24] <- COLON
datamap$Class[24] <- as.factor(COLON)
datamap$Class[24] <- "COLON"
datamap
sub("PD", datamap$Class, "")
sub(pattern="PD", x=datamap$Class, replacement="")
datamap$Class <- sub(pattern="PD", x=datamap$Class, replacement="")
datamap
write.table(datamap, file="CancerDataMap.txt", sep="\t")
q()
normals <- which(ycandat$Label == "N")
candat <- read.table("brownboost/data/CanDat.txt", header=T, sep="\t")
candat
names(candat)
ycandat
datamap <- read.table("brownboost/data/CancerDataMap.txt", header=t, sep="\t")
datamap <- read.table("brownboost/data/CancerDataMap.txt", header=T, sep="\t")
datamap
datamap <- datamap[-1,]
datamap <- datamap[-1,]
datamap[1,]
norms <- which(datamap$Label == "N")
tumors <- which(datamap$Label != "N" & !is.na(datamap$Label))
both <- c(norms, tumors)
both
save.image()
savehistory()
y <- c()
y[norms] <- 0
y[tumors] <- 1
y
candati <- cbind(candat, Class=y)
y[which(is.na(datamap$Label))] <- NA
y
length(y)
candati <- cbind(candat, Class=y)
save.image()
savehistory()

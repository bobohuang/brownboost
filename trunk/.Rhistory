source("solvede.R")
x <- c(1,2,3)
y <- c(2,3,4)
dot(x,y)
y <- c(2,3,4, 6)
dot(x,y)
for j in 0:length(x) 
for (j in 0:length(x)) 
{ print(j) }
length(x)
pi
install.packages("NORMT3")
install.packages("NORMT3")
q()
library(NORMT3)
?erf
x
y
y <- c(4,5,6)
dot(x,y)
erf(x)
erf(x/dot(x,y))
?real
as.double(erf(x/dot(x,y))
)
c(0,0) == c(0,0)
all(c(0,0) == c(0,0)
)
W <- 0
w <- 1
w*W
w+W
3*2^2
x
seq(-1, times=length(x))
rep(-1, times=length(x))
rnorm(8, 1, 20)
rnorm(20, 1, 20)
rnorm(20, 20, 20)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
trace()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
1/20
1/20
1/10
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
q()
sample(x=c(-1,1), replace=T, size=500)
500 * 0.3
sample(x=seq(1, 500), replace=F, size=150)
i = sample(x=seq(1, 500), replace=F, size=150)
i
h <- sample(x=c(-1,1), replace=T, size=500)
h[i]
h[i] * -1
source("solvede.R")
runSolver()
runSolver()
source("solvede.R")
runSolver()
ls()
y
epsilon <- 0.005
c <- (1/as.double(erfc(1-epsilon)))^2
c
a <-rep(0, times=500)
h <- sample(x=c(-1,1), replace=T, size=500)
y <- h 
i = sample(x=seq(1, 500), replace=F, size=150)
  y[i] <- -1 * y[i]                             # Give 30% error to y(x)
y
h
h - y
h + y
h*y
  b <- h * y + s
s <- c
  b <- h * y + s
b
  z <- c(alpha, t)
  alpha <- 0.1
  z <- c(alpha, t)
v <- c(b, rep(-1, times=length(b)))
z
z
z <- c(alpha, t)
 z
v
z <- list(alpha, t)
z
z[[1]]
z[[2]]
  tee <- 0.1
t
h*y
which(h*y == -1)
source("solvede.R")
runSolver()
tee <- 0.001
alpha
  v <- list(b, -1)
v
v[[2]]
dotl(tee, v)
source("solvede.R")
dotl(tee, v)
z
  z <- c(alpha, tee)
z
dotl(tee, v)
source("solvede.R")
dotl(tee, v)
z[1] * v[[1]]
z[2]*v[[2]]
z[2]*v[[2]] + z[1]*v[[1]]
source("solvede.R")
dotl(tee, v)
dotl(z, v)
a
s
a+s
a+s + dotl(z,v)
sum(a+s + dotl(z,v))
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
l
v
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
q()
ls()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
q()
sys.info()
Sys.info()
interactive()
package.skeleton(name="brownboost", list="binarybrownboost"
)
package.skeleton(name="brownboost", list="deSolver")
package.skeleton(name="brownboost", list="solvede")
q()
source("brownboost/R/deSolver.R")
ls()
runSolver
0.01 * 500
ls()
x
y
x <- c(2, 3)
y <- c(0,0)
x-y
sum(x-y)
source("brownboost/R/deSolver.R")
ls()
runSolverTest2()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
0.3089083 == 0.3089083
source("brownboost/R/deSolver.R")
runSolverTest1()
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
options()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest2()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest1()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
exp(-(24.24461/24.24461))
exp(-(1/24.24461) * 24.24461^2)
a
ls()
rm(list=ls())
source("brownboost/R/deSolver.R")
runSolverTest2()
a <- 24.24461
a
c <- 24.24461
erfd(a/sqrt(c))
  alpha <- 0.0
  tee <- 0.0
  epsilon <- 0.10                               # Estimated error of data set
  c <- (1/as.double(erfc(1-epsilon)))^2         # c defined from epsilon
  #c <- 32
  s <- c                               # s == c at t == 0
  a <-rep(0, times=500) + s                     # This is the margin r(x) + step
  h <- sample(x=c(-1,1), replace=T, size=500)   # This is the hypothesis
  y <- h                                        # This is the true class
  b <- h * y   
ls()
a
c
alpha
ls()
h
y
y*h
sum( exp( (-1/c) * (a + alpha*y*h + - tee)^2 ) *h*y
)
sum( exp( (-1/c) * (a + alpha*y*h + - tee)^2 )) *h*y
sum( exp( (-1/c) * (a + alpha*y*h + - tee)^2 ) *h*y)
sum( exp( (-1/c) * (a + alpha*y*h - tee)^2)
)
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
source("brownboost/R/deSolver.R")
runSolverTest1()
runSolverTest2()
runSolverTest1()
runSolverTest2()
runSolverTest1()
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
source("brownboost/R/deSolver.R")
runSolverTest2()
library(RWeka)
wine <- read.table("brownboost/data/wine.data", sep=",")
wine
y <- wine[,1]
y
wine <- wine[,2:]
length(names(wine))
wine <- wine[,2:14]
wine
y
ds <- DecisionStump(formula= y ~ wine)
wine <- read.table("brownboost/data/wine.data", sep=",")
ds <- DecisionStump(formula= wine$V1 ~ ., data=wine)
summary(ds)
ds <- DecisionStump(formula= wine$V1 ~ wine$V2 + wine$V3 + wine$V4, data=wine)
summary(ds)
ds
ds <- DecisionStump(formula= wine$V1 ~ ., data=wine)
ds
ds <- DecisionStump(formula=V1 ~ ., data=wine)
predict(ds)
train <- sample(seq(1, 178), 100)
train
test <- !(train %in% seq(1, 178))
test
(train %in% seq(1, 178))
(seq(1, 178) %in% train)
which(!(seq(1, 178) %in% train))
test <- which(!(seq(1, 178) %in% train))
test
train
trainData <- wine[train,]
testData <- wine[test,]
testData
ds <- DecisionStump(formula=V1 ~ ., data=trainData)
ds
table(testData, predict(ds))
ds
predict(ds, newdata=testData)
testData
jtree <- J48(formula=V1 ~ ., data=trainData)
attach(iris)
iris
trainData
trainData[,1]
as.factor(trainData[,1])
trainData <- as.factor(trainData[,1])
trainData
trainData <- wine[train,]
trainData[,1] <- as.factor(trainData[,1])
jtree <- J48(formula=V1 ~ ., data=trainData)
jtree
predict(jtree, newdata=testData)
r
ls()
a
r <- a - 24.24461
r
r <- rep(0, length(r))
r
s
c
exp(-s^2/c)
trainData
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(trainData, 3)
sample(q())

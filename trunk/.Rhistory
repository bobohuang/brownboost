source("solvede.R")
x <- c(1,2,3)
y <- c(2,3,4)
dot(x,y)
y <- c(2,3,4, 6)
dot(x,y)
for j in 0:length(x) 
for (j in 0:length(x)) 
{ print(j) }
length(x)
pi
install.packages("NORMT3")
install.packages("NORMT3")
q()
library(NORMT3)
?erf
x
y
y <- c(4,5,6)
dot(x,y)
erf(x)
erf(x/dot(x,y))
?real
as.double(erf(x/dot(x,y))
)
c(0,0) == c(0,0)
all(c(0,0) == c(0,0)
)
W <- 0
w <- 1
w*W
w+W
3*2^2
x
seq(-1, times=length(x))
rep(-1, times=length(x))
rnorm(8, 1, 20)
rnorm(20, 1, 20)
rnorm(20, 20, 20)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
rnorm(20, 10, 1)
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
trace()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
1/20
1/20
1/10
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
source("solvede.R")
runSolver()
q()
